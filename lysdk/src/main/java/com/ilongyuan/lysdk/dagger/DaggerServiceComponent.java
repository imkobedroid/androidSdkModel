// Generated by Dagger (https://dagger.dev).
package com.ilongyuan.lysdk.dagger;

import com.ilongyuan.lysdk.controller.BaseController;
import com.ilongyuan.lysdk.injection.component.ServiceComponent;
import com.ilongyuan.lysdk.injection.module.ServiceModule;
import com.ilongyuan.lysdk.repository.DataRepository;
import com.ilongyuan.lysdk.service.Service;
import com.ilongyuan.lysdk.service.impl.ServiceImpl;

import dagger.internal.Preconditions;

@SuppressWarnings({
        "unchecked",
        "rawtypes"
})
public final class DaggerServiceComponent implements ServiceComponent {
    private final ServiceModule serviceModule;

    private DaggerServiceComponent(ServiceModule serviceModuleParam) {
        this.serviceModule = serviceModuleParam;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static ServiceComponent create() {
        return new Builder().build();
    }

    private ServiceImpl getServiceImpl() {
        return injectServiceImpl(ServiceImpl_Factory.newInstance());
    }

    private Service getService() {
        return ServiceModule_ProvideServiceFactory.provideService(serviceModule, getServiceImpl());
    }

    @Override
    public void inject(BaseController service) {
        injectBaseController(service);
    }

    private ServiceImpl injectServiceImpl(ServiceImpl instance) {
        ServiceImpl_MembersInjector.injectDataRepository(instance, new DataRepository());
        return instance;
    }

    private BaseController injectBaseController(BaseController instance) {
        BaseController_MembersInjector.injectMService(instance, getService());
        return instance;
    }

    public static final class Builder {
        private ServiceModule serviceModule;

        private Builder() {
        }

        public Builder serviceModule(ServiceModule serviceModule) {
            this.serviceModule = Preconditions.checkNotNull(serviceModule);
            return this;
        }

        public ServiceComponent build() {
            if (serviceModule == null) {
                this.serviceModule = new ServiceModule();
            }
            return new DaggerServiceComponent(serviceModule);
        }
    }
}
